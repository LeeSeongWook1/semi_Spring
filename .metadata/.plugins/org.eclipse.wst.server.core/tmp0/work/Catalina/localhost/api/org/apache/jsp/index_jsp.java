/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.99
 * Generated at: 2024-04-25 08:22:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write(" <!-- jQuery 라이브러리 -->\r\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("    <!-- 부트스트랩에서 제공하고 있는 스타일 -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("    <!-- 부트스트랩에서 제공하고 있는 스크립트 -->\r\n");
      out.write("    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<h1>지역별 대기오염 상태</h1>\r\n");
      out.write("\r\n");
      out.write("	시도 :\r\n");
      out.write("	<select id=\"sidoName\">\r\n");
      out.write("		<option>전국</option>\r\n");
      out.write("		<option>서울</option>\r\n");
      out.write("		<option>부산</option>\r\n");
      out.write("		<option>대구</option>\r\n");
      out.write("		<option>인천</option>\r\n");
      out.write("		<option>광주</option>\r\n");
      out.write("		<option>대전</option>\r\n");
      out.write("		<option>울산</option>\r\n");
      out.write("		<option>경기</option>\r\n");
      out.write("		<option>경기</option>\r\n");
      out.write("		<option>강원</option>\r\n");
      out.write("		<option>충북</option>\r\n");
      out.write("		<option>충남</option>\r\n");
      out.write("		<option>전북</option>\r\n");
      out.write("		<option>전남</option>\r\n");
      out.write("		<option>경북</option>\r\n");
      out.write("		<option>경남</option>\r\n");
      out.write("		<option>제주</option>\r\n");
      out.write("		<option>세종</option>\r\n");
      out.write("	</select>\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	<button class=\"btn btn-info\" id=\"btn1\">해당지역대기정보</button>\r\n");
      out.write("	<br><br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function(){\r\n");
      out.write("			$('#btn1').click(function(){\r\n");
      out.write("			/*	\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : 'air',\r\n");
      out.write("					data : {sidoName : $('#sidoName').val()},\r\n");
      out.write("					type : 'get',\r\n");
      out.write("					success : function(result){\r\n");
      out.write("						//console.log(result.response.body.items);\r\n");
      out.write("						\r\n");
      out.write("						const items = result.response.body.items;\r\n");
      out.write("						\r\n");
      out.write("						let str = '';\r\n");
      out.write("						for(let i in items){\r\n");
      out.write("							const item = items[i];\r\n");
      out.write("							\r\n");
      out.write("							str+= '<tr>'\r\n");
      out.write("								+ '<td>' +item.stationName+'</td>'\r\n");
      out.write("								+ '<td>' +item.dataTime + '</td>'\r\n");
      out.write("								+ '<td>' +item.o3Value+'</td>'\r\n");
      out.write("								+ '<td>' +item.pm10Value+'</td>'\r\n");
      out.write("								+ '<td>' +item.khaiValue+'</td>'\r\n");
      out.write("								+ '</tr>';\r\n");
      out.write("						}\r\n");
      out.write("						\r\n");
      out.write("						$('tbody').html();\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("				*/\r\n");
      out.write("				\r\n");
      out.write("				/*\r\n");
      out.write("					익명함수를 화살표 표기법을 이용해서 작성(가시성이 좋음)\r\n");
      out.write("				\r\n");
      out.write("					\"function(){}\"를 		\"()=>{}\"\" 이렇게 작성할 수 있음\r\n");
      out.write("					\r\n");
      out.write("					\"function(a){}\"를		\"a =>{}\" 이렇게 작성할 수 있음\r\n");
      out.write("					\r\n");
      out.write("					\"function(a,b){}\"를 		\"(a,b)=>{}\"이렇게 작성할 수 있음\r\n");
      out.write("					\r\n");
      out.write("					\"function(){return 'a'}\"를  ()=>'a'\"이렇게 작성할 수 있음\r\n");
      out.write("					\r\n");
      out.write("				*/\r\n");
      out.write("				\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : 'xml',\r\n");
      out.write("					data : {sidoName : $('#sidoName').val()},\r\n");
      out.write("					type : 'get',\r\n");
      out.write("					success : data => {\r\n");
      out.write("						\r\n");
      out.write("						//console.log(data);\r\n");
      out.write("						\r\n");
      out.write("						//jQuery => find() : 기준이 되는 요소의 하위요소들 중 특정 요소를 찾을 떄 사용(HTML요소) -> XML 요소에도 사용가능\r\n");
      out.write("						\r\n");
      out.write("						//console.log($(data).find('item'));\r\n");
      out.write("						\r\n");
      out.write("						//XML형식의 응답데이터를 받았을떄\r\n");
      out.write("						//1. 응답 데이터에서 실제 데이터가 담겨있는 요소 선택\r\n");
      out.write("						const items = $(data).find('item');\r\n");
      out.write("						\r\n");
      out.write("						//2.반복문을 통해 실제 데이터가 담긴 요소들에 접근해서 동적으로 요소 만들기!\r\n");
      out.write("						let value='';\r\n");
      out.write("						items.each((i,item)=>{ //1번 i에는 index, 2번 item에는 element\r\n");
      out.write("							//console.log(item);\r\n");
      out.write("							//console.log($(item).find('stationName').text());\r\n");
      out.write("							\r\n");
      out.write("							value+= '<tr>'\r\n");
      out.write("									+'<td>' +$(item).find('stationName').text() +'</td>'\r\n");
      out.write("									+'<td>' +$(item).find('dataTime').text() +'</td>'\r\n");
      out.write("									+'<td>' +$(item).find('o3Value').text() +'</td>'\r\n");
      out.write("									+'<td>' +$(item).find('pm10Value').text() +'</td>'\r\n");
      out.write("									+'<td>' +$(item).find('khaiValue').text() +'</td>'\r\n");
      out.write("									+'</tr>'; \r\n");
      out.write("							\r\n");
      out.write("							\r\n");
      out.write("						});\r\n");
      out.write("						\r\n");
      out.write("						$('tbody').html(value);\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("					},\r\n");
      out.write("					error : () => {\r\n");
      out.write("						console.log('실패');\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<table class=\"table table-hover\">\r\n");
      out.write("		<thead class=\"thead-dark\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>측정소명</th>\r\n");
      out.write("				<th>측정일시</th>\r\n");
      out.write("				<th>오존농도</th>\r\n");
      out.write("				<th>미세먼지농도</th>\r\n");
      out.write("				<th>통합 대기환경수치</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th colspan=\"5\">지역을 선택하시고 조회버튼을 눌러주세요 </th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
